<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Shmulik Klein | Blog</title><link>http://shmulik-klein.github.io/posts/</link><description>Recent content in Posts on Shmulik Klein | Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&amp;copy; Copyright 2022, Shmulik Klein</copyright><lastBuildDate>Wed, 20 Jul 2022 10:42:33 +0200</lastBuildDate><atom:link href="http://shmulik-klein.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>To Seal or not to Seal: Sealed Classes</title><link>http://shmulik-klein.github.io/posts/sealed-classes/</link><pubDate>Wed, 20 Jul 2022 10:42:33 +0200</pubDate><guid>http://shmulik-klein.github.io/posts/sealed-classes/</guid><description>Sealed with a Kiss Java 15 introduced a preview feature called Sealed Classes and Intefaces, which was finalized in Java 17. Sealed classes and interfaces restrict which other classes or interfaces may extend or implement them.
You seal a class/interface by applying the sealed modifier before the class/interface keyword. Than, you have to provide which classes/interface are allowed to inherit/implement the sealed class/interface using the permits keyword.
public sealed class Beer permits Ale, Lager, Porter, Stout { .</description></item><item><title>Transactions Isolation #2: Phantom Menace</title><link>http://shmulik-klein.github.io/posts/db_isolation/commited_read-copy/</link><pubDate>Fri, 20 May 2022 11:13:37 +0200</pubDate><guid>http://shmulik-klein.github.io/posts/db_isolation/commited_read-copy/</guid><description>Phantom Menace In this second post of the series of &amp;ldquo;Transaction Isolation&amp;rdquo;, I would like to discuss about the committed read isolation level and its risks.
... ctx1 := context.Background() tx1, err := db.BeginTx(ctx1, &amp;amp;sql.TxOptions{Isolation: sql.LevelReadCommitted}) if err != nil { log.Fatalln(err) } printUsers(tx1) go func() { ctx2 := context.Background() tx2, err := db.BeginTx(ctx2, &amp;amp;sql.TxOptions{Isolation: sql.LevelReadCommitted}) if err != nil { log.Fatalln(err) tx2.Rollback() return } _, err = tx2.ExecContext(ctx2, &amp;#34;INSERT INTO users(name) VALUES(&amp;#39;Elmo&amp;#39;)&amp;#34;) if err !</description></item><item><title>Transactions Isolation #1: Dirty Read</title><link>http://shmulik-klein.github.io/posts/db_isolation/uncommited_read/</link><pubDate>Tue, 10 May 2022 11:13:37 +0200</pubDate><guid>http://shmulik-klein.github.io/posts/db_isolation/uncommited_read/</guid><description>Transactions don&amp;rsquo;t socialize A Database Transaction is an atomic unit of work, sometimes made up of multiple operations.
When a transaction makes multiple changes to the database, either all the changes succeed when the transaction is committed, or all the changes are undone when the transaction is rolled-back.
Isolation is the &amp;lsquo;I&amp;rsquo; in ACID (a set of properties of a database transactions intend to guarantee data validity) It ensures that concurrent execution of transactions will obtain the same state that would have been obtained if the transactions were executed sequentially.</description></item></channel></rss>