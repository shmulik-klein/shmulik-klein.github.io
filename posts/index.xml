<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Shmulik Klein | Blog</title><link>http://shmulik-klein.github.io/posts/</link><description>Recent content in Posts on Shmulik Klein | Blog</description><generator>Hugo</generator><language>en-us</language><copyright>&amp;copy; Copyright 2025, Shmulik Klein</copyright><lastBuildDate>Thu, 15 Dec 2022 10:50:50 +0100</lastBuildDate><atom:link href="http://shmulik-klein.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Must-known Kotlin Features for Functional Programming</title><link>http://shmulik-klein.github.io/posts/functional-kotlin/</link><pubDate>Thu, 15 Dec 2022 10:50:50 +0100</pubDate><guid>http://shmulik-klein.github.io/posts/functional-kotlin/</guid><description>&lt;p>Kotlin takes Java’s functional programming features, gives them a makeover, and makes them way cooler. It’s like Java went to a coding gym and came back stronger and sleeker. In this post, we’ll check out how Kotlin takes Java’s functional side to the next level, making your code cleaner and way more fun to write.&lt;/p>
&lt;h3 id="function-types">Function Types&lt;/h3>
&lt;p>Functions are &lt;a href="https://en.wikipedia.org/wiki/First-class_function">&lt;em>first class citizens&lt;/em>&lt;/a> in Kotlin. To facilitate this, Kotlin has a &lt;a href="https://kotlinlang.org/docs/lambdas.html#function-types">&lt;em>Fuction Type&lt;/em>&lt;/a> - a type which specifies that an object needs to be a function.&lt;/p></description></item><item><title>To Seal or not to Seal: Sealed Classes</title><link>http://shmulik-klein.github.io/posts/sealed-classes/</link><pubDate>Wed, 20 Jul 2022 10:42:33 +0200</pubDate><guid>http://shmulik-klein.github.io/posts/sealed-classes/</guid><description>&lt;p>Java 15 introduced a preview feature called &lt;a href="https://openjdk.org/jeps/360">Sealed Classes and Intefaces&lt;/a>, which was finalized in Java 17.
Sealed classes and interfaces restrict which other classes or interfaces may extend or implement them.&lt;/p>
&lt;p>You seal a class/interface by applying the &lt;code>sealed&lt;/code> modifier before the &lt;code>class&lt;/code>/&lt;code>interface&lt;/code> keyword. Than, you have to provide which classes/interface are allowed to inherit/implement the sealed class/interface using the &lt;code>permits&lt;/code> keyword.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">sealed&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Sensor&lt;/span> permits TempSensor, ForceSensor, PiezoSensor {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TempSensor&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> Sensor {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="to-seal-or-not-to-seal">To seal or not to seal?&lt;/h3>
&lt;p>Is sealing a class/interface is really a necssary feature? what does its purpose?&lt;/p></description></item><item><title>Transactions Isolation #2: Phantom Menace</title><link>http://shmulik-klein.github.io/posts/db_isolation/commited_read-copy/</link><pubDate>Fri, 20 May 2022 11:13:37 +0200</pubDate><guid>http://shmulik-klein.github.io/posts/db_isolation/commited_read-copy/</guid><description>&lt;h3 id="phantom-menace">Phantom Menace&lt;/h3>
&lt;p>In this second post of the series of &amp;ldquo;Transaction Isolation&amp;rdquo;, I would like to discuss about the &lt;em>committed read&lt;/em> isolation level and its risks.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">ctx1&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Background&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">tx1&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">BeginTx&lt;/span>(&lt;span style="color:#a6e22e">ctx1&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">sql&lt;/span>.&lt;span style="color:#a6e22e">TxOptions&lt;/span>{&lt;span style="color:#a6e22e">Isolation&lt;/span>: &lt;span style="color:#a6e22e">sql&lt;/span>.&lt;span style="color:#a6e22e">LevelReadCommitted&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatalln&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">printUsers&lt;/span>(&lt;span style="color:#a6e22e">tx1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">ctx2&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Background&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">tx2&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">BeginTx&lt;/span>(&lt;span style="color:#a6e22e">ctx2&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">sql&lt;/span>.&lt;span style="color:#a6e22e">TxOptions&lt;/span>{&lt;span style="color:#a6e22e">Isolation&lt;/span>: &lt;span style="color:#a6e22e">sql&lt;/span>.&lt;span style="color:#a6e22e">LevelReadCommitted&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatalln&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">tx2&lt;/span>.&lt;span style="color:#a6e22e">Rollback&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">tx2&lt;/span>.&lt;span style="color:#a6e22e">ExecContext&lt;/span>(&lt;span style="color:#a6e22e">ctx2&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;INSERT INTO users(name) VALUES(&amp;#39;Elmo&amp;#39;)&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatalln&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">tx1&lt;/span>.&lt;span style="color:#a6e22e">Rollback&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">tx2&lt;/span>.&lt;span style="color:#a6e22e">Commit&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Sleep&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">printUsers&lt;/span>(&lt;span style="color:#a6e22e">tx1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">tx1&lt;/span>.&lt;span style="color:#a6e22e">Rollback&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">printUsers&lt;/span>(&lt;span style="color:#a6e22e">tx&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">sql&lt;/span>.&lt;span style="color:#a6e22e">Tx&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">r&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">tx&lt;/span>.&lt;span style="color:#a6e22e">Query&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;SELECT name FROM users&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatalln&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">tx&lt;/span>.&lt;span style="color:#a6e22e">Rollback&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Print&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;tx1 sees the following users: &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Scan&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34; %s &amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Print&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;\n&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When running the code, we see that the second transaction, &lt;code>tx2&lt;/code>, being isolated with a &lt;code>COMMITED_READ&lt;/code> level, sees the inconsistent values for the users.
In the first &lt;code>SELECT&lt;/code> query users, it sees &lt;code>Bert&lt;/code> and &lt;code>Ernie&lt;/code>, but on the second query, it sees &lt;code>Bert, Ernie&lt;/code> and &lt;code>Elmo&lt;/code>.&lt;/p></description></item><item><title>Transactions Isolation #1: Dirty Read</title><link>http://shmulik-klein.github.io/posts/db_isolation/uncommited_read/</link><pubDate>Tue, 10 May 2022 11:13:37 +0200</pubDate><guid>http://shmulik-klein.github.io/posts/db_isolation/uncommited_read/</guid><description>&lt;h3 id="transactions-dont-socialize">Transactions don&amp;rsquo;t socialize&lt;/h3>
&lt;p>A &lt;em>Database Transaction&lt;/em> is an atomic unit of work, sometimes made up of multiple operations.&lt;/p>
&lt;p>When a transaction makes multiple changes to the database, either all the changes succeed when the transaction is &lt;em>committed&lt;/em>, or all the changes are undone when the transaction is &lt;em>rolled-back&lt;/em>.&lt;/p>
&lt;p>&lt;em>Isolation&lt;/em> is the &amp;lsquo;I&amp;rsquo; in ACID (a set of properties of a database transactions intend to guarantee data validity)
It ensures that concurrent execution of transactions will obtain the same state that would have been obtained if the transactions were executed sequentially.&lt;/p></description></item></channel></rss>