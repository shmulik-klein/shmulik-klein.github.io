<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Functional Programing on Shmulik Klein | Blog</title><link>http://shmulik-klein.github.io/tags/functional-programing/</link><description>Recent content in Functional Programing on Shmulik Klein | Blog</description><generator>Hugo</generator><language>en-us</language><copyright>&amp;copy; Copyright 2025, Shmulik Klein</copyright><lastBuildDate>Thu, 15 Dec 2022 10:50:50 +0100</lastBuildDate><atom:link href="http://shmulik-klein.github.io/tags/functional-programing/index.xml" rel="self" type="application/rss+xml"/><item><title>Must-known Kotlin Features for Functional Programming</title><link>http://shmulik-klein.github.io/posts/functional-kotlin/</link><pubDate>Thu, 15 Dec 2022 10:50:50 +0100</pubDate><guid>http://shmulik-klein.github.io/posts/functional-kotlin/</guid><description>&lt;p>Coming from Java, these are the features that let&amp;rsquo;s Kotlin to be a functional programming language:&lt;/p>
&lt;h3 id="function-types">Function Types&lt;/h3>
&lt;p>Functions are &lt;a href="https://en.wikipedia.org/wiki/First-class_function">&lt;em>first class citizens&lt;/em>&lt;/a> in Kotlin. To facilitate this, Kotlin has a &lt;a href="https://kotlinlang.org/docs/lambdas.html#function-types">&lt;em>Fuction Type&lt;/em>&lt;/a> - a type which specifies that an object needs to be a function.&lt;/p>
&lt;p>To decalre it, one should wrap the types of the arguments this function expected to recieve in brackets, an arrow (&lt;code>-&amp;gt;&lt;/code>) and then the result type of the function (if the function doesn&amp;rsquo;t return anything &lt;em>significant&lt;/em> it should return a &lt;code>Unit&lt;/code>), something like this &lt;code>() -&amp;gt; Unit&lt;/code> or this &lt;code>(Int, Int) -&amp;gt; Int&lt;/code>.&lt;/p></description></item></channel></rss>