<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kotlin on Shmulik Klein | Blog</title><link>http://shmulik-klein.github.io/tags/kotlin/</link><description>Recent content in Kotlin on Shmulik Klein | Blog</description><generator>Hugo</generator><language>en-us</language><copyright>&amp;copy; Copyright 2025, Shmulik Klein</copyright><lastBuildDate>Thu, 15 Dec 2022 10:50:50 +0100</lastBuildDate><atom:link href="http://shmulik-klein.github.io/tags/kotlin/index.xml" rel="self" type="application/rss+xml"/><item><title>Must-known Kotlin Features for Functional Programming</title><link>http://shmulik-klein.github.io/posts/functional-kotlin/</link><pubDate>Thu, 15 Dec 2022 10:50:50 +0100</pubDate><guid>http://shmulik-klein.github.io/posts/functional-kotlin/</guid><description>&lt;p>Java&amp;rsquo;s approach to functional programming, while possible, often feels indirect, particularly when dealing with function types. The need for explicit interfaces, like &lt;code>Function&amp;lt;T,R&amp;gt;&lt;/code>, &lt;code>Consumer&amp;lt;T&amp;gt;&lt;/code>, or custom ones, can lead to verbose and somewhat convoluted code.&lt;/p>
&lt;p>Kotlin, on the other hand, introduces &lt;a href="https://en.wikipedia.org/wiki/First-class_function">first-class function types&lt;/a>, allowing for a more streamlined and expressive syntax. This distinction fundamentally alters the way higher-order functions are handled, impacting readability and maintainability.&lt;/p>
&lt;p>This blog post discuss these differences and highlights the main language features Kotlin provides for Functional Programming.&lt;/p></description></item></channel></rss>